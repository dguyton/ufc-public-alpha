## Universal Fan Controller (UFC) motherboard fan zone data file
##
## Asus .conf template file
##
## The entries below are examples to demonstrate formatting
## and variable declaration.
##
## Copy this file, remove these administrative comments,
## remove irrelevant entries, customize to your needs.
##
## Examine existing .conf files to get an idea of proper formatting.

###################
# About .conf Files
###################

# What are these custom ".zone" files and why are they important?
#
# Custom .conf files can be used to override default values for various
# characteristics of the PID fan controller programs, such as defining
# fan zones via custom fan zone schemas and labels.
#
# .conf files are only applicable when the current motherboard controls the fans
# via fan zones, and fan headers cannot be controlled individually.
#
# For example, the differentiation of whether the current motherboard fans are
# controlled directly or via fan zones is primarily determined by hard-coded
# settings in the Builder program. The corresponding logic is based on known
# characteristics of motherboard manufacturers, and in some cases further refined
# by the generation of a given motherboard model.

######################
# .conf File Use Cases
######################

# Why is this important? Many mobo models follow a consistent pattern for
# their given manufacturer/vendor. However, there are some anomalies.
# Rather than hard-coding all of the edge cases, a simpler solution is to
# import variable settings for boards that do not comply with the default
# program settings. That is the intended purpose of these ".zone" files.
#
# zone files are primarily designed to benefit systems with anomalous
# motherboards with fan headers controlled via fan zones.
#
# If a motherboard .conf file is not found, the default values will be
# utilized. Therefore, if no changes are required, it is not necessary
# to create a .conf file for a particular board.

######################################
# How are "default" Values Determined?
######################################

# The default values for certain required characteristics of motherboards
# are hard-coded into the Builder program to the extent this information
# is known. For example, Supermicro and Dell brand motherbards have
# default variables for fan control methods because such information is
# relatively well documented. And it is unlikely (especially with Supermicro,
# that you will need to need a zone file for the vast majority of their
# motherboards. On the other hand, there a few Supermicro mobo models with
# unusual traits, such as 3 fan zones for example. And for those model mobos,
# you will want to have a corresponding .conf file that overrides the default
# settings.
#
# Remember that .conf files override based on manufacturer and/or model of
# motherboard. This provides flexibility, such as if you wanted to override
# the default Supermicro motherboard manufacturer settings that are hardcoded
# in the Builder and Service programs.
#
# .conf files are useful for overriding the default settings on a broad scale.
# They make modifying the Builder program's behavior easier, and can obviate the
# need to touch the configuration file.

##########################################
# Model vs. Manufacturer Level .conf Files
##########################################

# .conf files may override program traits related to motherboard manufacturers
# and/or motherboard models.
#
# The Builder program first scans for matching .conf files based on the
# motherboard manufacturer. A scan is then performed for the specific motherboard
# model.
#
# When both mobo manufacturer and model zone files exist, the contents of both
# will be imported, however the model-specific variables will be imported last,
# and will thus overwrite any identical variable settings found in the
# manufacturer-specific zone file.
#
# Another way of looking at this is, the most specific match will take precedence.

####################################################
# What Happens When No Matching .conf File is Found?
####################################################

# If no matching .conf file is found, the Builder program will utilize the default
# settings based on the motherboard manufacturer, generations or series, and model,
# depending what information has been deduced (via auto-detection) and which pieces
# of that set of information are defined in the default settings hard-coded into
# the Builder program. Note this information may have been provided to the Builder
# program via the .conf program configuration file.

#############################################
# The Roles of the .conf File vs. .conf Files
#############################################

# The Builder program's default settings may be superseded by its configuration
# file (.conf), or .conf files.
#
# .conf files have higher priority as compared to program defaults or the config
# file.
#
# .conf files may be of type motherboard manufacturer or mobo model.
#
# The hierarchical order is as follows (lowest -> highest priority):
# 	1. Builder program default settings (hard-coded by motherboard manufacturer)
# 	2. Builder program configuration .conf file
# 	3. Motherboard manufacturer .conf file
# 	4. Motherboard model .conf file (highest priority)
#
# This method allows the use of .conf files to override other sources of the same
# setting, and ultimately a specific model .conf file has the highest authority.
# Thus, it is possible to set a standard of fan controller behavior at a base level
# for a particular brand of motherboards, while also cherry-picking specific board
# models which may require unique handling for whatever reason.
#
# The purpose of this methodology is to allow maximum flexibility in defining how
# any given motherboard requires its fans to be controlled. 

###############
# Suggested Use
###############

# The following variables make the most sense to override via .conf files:
#
# 	- fan_group_schema[)		: array of fan zones and supported fan header names
#	- fan_group_label[)		: array of fan zone schema labels
#	- bmc_command_schema	: fan schema type based on board model/generation
#	- cpu_fan_group			: fan zone IDs or header names for CPU cooling
#	- fan_control_method	: fan control method

###################################################################################
###################################################################################

##
# Assign a BMC fan control method
#
# These are normally consistent across all models for a given manufacturer,
# and therefore this setting can generally be established in the manufacturer
# level .conf file. In the event a particular model motherboard manages fans
# differently, it is possible to override the manufacturer-level setting by
# including a different setting in an individual model .conf file.
#
# Possible options:
#	--> direct    : fan speeds are independent, and fans are controlled individually
#	--> group     : fan speeds are independent, but fan speed changes must target all fans at once
#	--> zone      : fans are organized into logical groups called zones
#	--> universal : fans can only be controlled en masse, as a group of all fans
##

# fan_control_method="zone"

##
# example default fan schemas
#
# fan header names must match IPMI sensor names or will be ignored
##

# fan_group_schema[0]="FAN0,FAN1,FAN2,FAN3,FAN4,FAN5,FAN6,FAN7,FAN8,FAN9"
# fan_group_schema[1]="FANA,FANB,FANC,FAND,FANE,FANF,FANG,FANH,FANI"
# fan_group_schema[3]="FANJ,FANK,FANL,FANM,FANN,FANO,FANP"
# fan_group_schema[4]="FAN_REAR1,FAN_FRONT_2,FAN_CPU_1"

##
# assign labels to fan zones
#
# labels can be anything you want, but ideally should suit their purpose
# these settings will override CPU cooling zone(s) declared in config file
#
# "CPU" is a special label and denotes fans assigned to cool CPU(s)
##

# fan_group_label[0]="cpu"
# fan_group_label[1]="device" # peripheral device cooling fan zone (e.g. disks)
# fan_group_label[2]="left"
# fan_group_label[3]="right"
# fan_group_label[4]="graphics" # graphics card cooling fan zone

##
# which fan zones or fan headers should cool the CPU(s)?
# applies when not specified in user-defined .config file
#
# use one or more zone IDs, or one or more fan header names
#
# normally, this should not be specified here, though it is possible to do
# so if a particular motherboard has very specific fan headers associated
# with CPU cooling which should be enforced
#
# Otherwise it is recommended to leave this feature to the config file.
##

# cpu_fan_group=0
# cpu_fan_group="FAN0,FAN1"

################################
# IPMI SDR OUTPUT FIELD MAPPINGS
################################

##
# These variables apply to the service (runtime) program only,
# however they must be passed-thru from the builder program to
# the service program during .init file compilation.
##

## CPU id column for ipmitool output

# ipmi_sensor_column_cpu[id]=1

## CPU temperature sensor column number for ipmitool
# Necessary when lm-sensors program is not installed.
# Corresponds to output column when ipmitool is in SDR mode.
# Applicable to service/runtime program only.

# ipmi_sensor_column_cpu[temp]=4

###################################
# IPMI SENSOR OUTPUT FIELD MAPPINGS
###################################

## column positions in ipmitool sensor output
# name   = name of fan column
# speed  = fan speed column
# status = fan status column

# ipmi_sensor_column_fan[name]=1
# ipmi_sensor_column_fan[speed]=3
# ipmi_sensor_column_fan[status]=7

##
# AST2400 | AST2500 BMC model
##

## lower fan threshold metadata field positions in IPMI sensor output
# lnr = Lower Non-Recoverable
# lcr = Lower CRitical
# lnc = Lower Non-Critical

ipmi_sensor_column_fan[lnr]=9
ipmi_sensor_column_fan[lcr]=11
ipmi_sensor_column_fan[lnc]=13

## upper fan threshold metadata field position in IPMI sensor output
# unc = Upper Non-Critical
# ucr = Upper CRitical
# unr = Upper Non-Recoverable

ipmi_sensor_column_fan[unc]=15
ipmi_sensor_column_fan[ucr]=17
ipmi_sensor_column_fan[unr]=19

## fan hysteresis
# metadata field/column positition in IPMI sensor output for fan hysteresis data
# derived from IPMItool sensor output
# may not be available here on some BMC implementations
# relevant to builder program only

# ipmi_sensor_column_fan[hysteresis]=4
