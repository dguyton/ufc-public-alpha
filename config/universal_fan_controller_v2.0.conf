# Universal Fan Controller configuration settings

########################################
##
## FAN CONTROLLER CONFIGURATION SETTINGS
##
########################################

# Version number below must match builder version.

# DO NOT UN-COMMENT LINE BELOW
# program_version="2.0"

################################################################################

# This is a configuration file mated to the PID Fan Controller program.
#
# This file is imported by the PID Fan Controller setup program. The setup
# program uses this information to establish the init file utilized by the
# actual fan controller runtime program.
#
# The setup program will not run without this configuration file.

################################################################################

#####################
# OPERATING VARIABLES
#####################

## Service Programs Username [ *** optional *** ]
#
# *** ADVANCED USE ONLY ***
#
# Do not alter this unless you are certain you know what you are doing!
#
# Username that is expected to run both the Launcher and Runtime Service
# programs.
#
# When this variable is not specified, the 'root' user will be presumed to
# be the default username that will run both the Service Launcher and
# Runtime programs.
#
# Therefore, this should normally be left blank (null), indicating the
# root user will operate the Service programs. This is normally the case
# since the Service programs will be run as systemd daemon services.

service_username=""

#########################
# ENVIRONMENTAL VARIABLES
#########################

## Program Name [ *** REQUIRED *** ]
#
# Human-readable name of all Builder and Service programs.
# Logs will mention either this description or the "Service Name"
# depending on the log in question. When suitable, the Program Name
# will be displayed instead of or in addition to Service Name.

program_name="Universal Fan Controller"

## Service Name [ *** REQUIRED *** ]
#
# This is the base name for the systemd daemon services that will be created
# and that will trigger the Service Launcher and Service Runtime programs.
#
# Be conscientous of naming syntax. Invalid service names may cause the name
# provided here to be modified.
##

service_name="universal-fan-controller"

## Unique Server ID [ *** optional *** ]
#
# Unique name of server the fan controller is running on.
# Purpose is to allow end user to clearly identify which server generated any
# given email alert (if email alerts are active).
#
# Human-readable strings are recommended (e.g. 'Office server').
# This setting is optional and may be empty.
##

server_id="Transcoding Server"

## Service Program Working Directory [ *** REQUIRED *** ]
#
# Top-level destination directory for Builder to copy service (runtime) program
# and log files to.
#
# Pointing to root directory is discouraged, but to do so its value would be "/"
#
# default is /usr/local/bin
##

target_dir="/usr/local/bin/ufc"

#########################
# CRITICAL PROGRAM CONFIG
#########################

##
# These variables impact critical operating characteristics of the Builder and/or
# Service program files. They are included here in the configuration file in order
# to avoid complicating any potential future need to modify them.
#
# DO NOT MODIFY these values unless you are absolutely certain of what you are
# doing and you have read the full program documentation, and reviewed all
# program source code.
##

##
# Binary string lengths of fan and zone IDs [ *** REQUIRED *** ]
#
# These variables represent every physical fan header and fan zone (respectively)
# via a binary true/false switch for each. Each character in the string represents
# a single physical fan header or fan zone, and acts as a placeholder and presence
# indicator.
#
# These values represent the physical (fan header) and logical (fan zone) maximum
# possible number of each object type that can be tracked, monitored, and
# controlled. There may be less than this number of each object type available, but
# there cannot be more.
#
# The strings contain only 1's and 0's - thus representing binary notation - where
# 0 = false (not present) and 1 = true (is present, or does exist).
#
# The string bytes are evaluated in order, such that the first byte in the string
# (byte 0) represents Fan ID 0 or Fan Zone ID 0, depending on which binary string
# is examined.
#
# The length of each string must be equal to the maximum number of fan headers or
# fan zones which may be physically (fan headers) and logically (fan zones)
# available. These string values should be set to theoretical limits and not actual
# limits, in order to retain their flexibility, since at the outset of establishing
# this configuration file, its specific application to any given motherboard is
# unknown.
#
# Therefore, the default values for these tracking variables are 16 characters (or
# 16 bytes, 16 binary positions) for the physical fan header tracker, and 8 bytes
# for the logical fan zone ID tracker.
#
# A value of 0 in any given byte position always indicates that a fan header or
# fan zone (depending on which binary string is evaluated) does not exist for that
# particular ID position. For example, if a motherboard has fan zones 0, 1, and 3
# established as valid logical fan zones, then the 0, 1, and 3 byte values for
# the fan zone binary tracker would be set by the Builder program such that byte
# positions 0, 1, and 3 all = 1, while all other byte positions would be set = 0.
#
# Thus, these variables define the number of ordinal positions for fan and zone IDs
# relative to various tracking and metadata variables, represent the maximum number
# of fan headers and zones that can be tracked by this Builder program and both
# Service programs.
#
# These values may be higher than the total maximum number of each object type,
# but cannot be lower. If there are more object types available than there are byte
# positions in a given binary tracking variable, the higher numbered ID objects
# outside the range of the binary tracker number of bytes will not be tracked and
# cannot be utilized by any of the programs. This would lead to unpredictable (and
# likely undesirable) results.
#
# Defaults are a maximum of 16 independent fan headers and 8 independent fan zones.
##

# maximum number of logical fan zones
fan_zone_binary_length=8

# maximum number of physical fan headers
fan_header_binary_length=16

###########################
## CPU FAN CONTROL SETTINGS
###########################

## CPU FAN ZONE ACTIVE MANAGEMENT [ *** REQUIRED *** ]
#
# Should this program moderate CPU fan speeds to control cpu temperature?
#
# If false, then CPU fans will be set to automatic fan control when possible.
# When true, CPU fan speeds will be controlled based on CPU temperature.
##

cpu_fan_control=true

## CPU THRESHOLD TEMPS [ *** REQUIRED *** ]
#
# CPU fan duty cycles are based on average reported CPU temperature.
# Temperatures (in Celsius) to trigger corresponding CPU fan duty cycle.
##

cpu_temp_high=65
cpu_temp_med=50
cpu_temp_low=40

## CPU FAN DUTY LEVELS [ *** REQUIRED *** ]
#
# cpu fan duty cycles (percentage of full power)
##

fan_duty_min[cpu]=30
fan_duty_low[cpu]=40
fan_duty_med[cpu]=70
fan_duty_high[cpu]=100
fan_duty_max[cpu]=100

## CPU fan duty cycle when script begins [ *** REQUIRED *** ]

fan_duty_start[cpu]=30

## LOW FAN DUTY CYCLE RPM OFFSET [ *** optional *** ]
#
# Certain calculations estimate expected raw fan speeds (RPMs).
# When fan duty cycles are low, the default calculations skew the expected fan
# speed range such that it is lower than actual raw physical fan speeds tend
# to be in reality at such fan duty levels. Therefore, an offset is applied to
# the calculation, for the purpose of making performance and reliability
# RPM speed determinations. This offset prevents validation formulas from
# projecting actual fan speeds that are too low when very low fan duty levels
# are in play.
#
# Most fans do not ramp in a linear fashion, especially at very low speeds.
# Therefore, literal values are presumed to be inaccurate and/or would stall
# most fans. The default threshold is < 25% fan duty, based on PWM patterns.
# The default offset is +10% to expected fan speed (RPM).
##

# percentage to pad expected fan speed (+% estimated RPM)
low_duty_cycle_offset=10

# fan duty level to pad estimated speed (below %)
low_duty_cycle_threshold=25

###########################
## CPU TEMPERATURE SETTINGS
###########################

## CPU temperature scanning model [ *** REQUIRED *** ]
#
# Choices are 'cpu' or 'core'
# Default is cpu
##

cpu_temp_method=cpu

## CPU Override Temperature [ *** optional *** ]
#
# When this CPU temp is reached, and separate disk device cooling fans exist,
# The disk cooling fan speeds will be increased to their maximum, in order to
# to help cool the CPU(s).
#
# To disable, set to 0 or null
##

cpu_temp_override=72

## Auto-detect CPU Critical Temperature Threshold [ *** optional *** ]
#
# Note this will cause $cpu_temp_override to be validated, or assign a value
# when $cpu_temp_override is not specified in this config file.
##

auto_detect_cpu_critical_temp=true

## Auto-detect CPU High Temperature Threshold [ *** optional *** ]

auto_detect_cpu_high_temp=false

################
## DAEMON CONFIG
################

## systemd Services Parent Directory [ *** optional *** ]
#
# systemd service folder
#
# default is /etc/systemd/system
##

daemon_service_dir_default="/etc/systemd/system"

## sysctl delay [ *** optional *** ]
#
# Delay in seconds between multiplexed sysctl commands for systemd events.
# Hard-coded default in Builder is 2 seconds.
##

daemon_init_delay=5

## Enable Failure Notification Handler [ *** optional *** ]
#
# When true, the Failure Notification Handler (FNH) daemon service will be
# utilized. When not true, it will not be implemented.
#
# The FNH service is automated to send notifications to the designated end
# user when a failure of any Service program occurs.
##

enable_failure_notification_service=true

###
# Service program daemon service names [ *** optional *** ]
#
# Default names for daemon services.
#
# When null (default), Builder generate them automatically.
##

launcher_daemon_service_name_default=""
runtime_daemon_service_name_default=""
failure_handler_service_name_default=""

###############
## EMAIL ALERTS
###############

## Send email alerts [ *** optional *** ]
#
# Send status update to end user for certain events, such as at script startup
# and during certain critical events, using postfix.
#
# Set = true to receive emails. Set false or null to not.
##

email_alerts=true

## email address to which email alerts will be sent

email="dguyton@gmail.com"

############################
## PROGRAM LOG FILE SETTINGS
############################
#
# Builder and Service program logging preferences.
##

## Syslog (system log) preference [ *** optional *** ]
#
# false = do not post critical error messages to syslog (default setting is true)
# any other value (including null) will result in allowing message posts to syslog
##

log_to_syslog=true

## Debug Mode [ *** optional *** ]
# Applies to both Builder and Service program types.
#
# 0 = no debugging
# 1 = critical messages only
# 2 = critical and warning messages
# 3 = critical, warning, and info messages
# 4 = all message types + details
# 1/2/3/4 choice gradually increases verbosity
#
# defaults to level 0
#
# When = 0 or null, all program and JSON debugging will be disabled.
##

debug_level=4

## Service log file parent directory [ *** REQUIRED when debugging/program logging level is not 0 or null and/or JSON logging requested *** ]
#
# Main log file directory for Service Launcher and Runtime program logs.
# When not specified, but program and/or metadata logging is requested via other
# parameters in this configuration file, the Builder will default the Service program
# log directory tree top level to a "/log/" sub-directory under the top-level Service
# target directory location.
#
# If any sort of logging is requested via this config file, and a location is specified
# here, and the Builder program deems the specified location is invalid, the default
# location will be substituted.
#
# If a Service program determines a logging location is invalid, it will disable logging.
#
# If a location is specified, but does not exist, the Service program will attempt
# to create it. If that fails, the default location will be attempted. If that fails,
# logging parameters will be ignored.
#
# Remember, this is the top-level (or parent level) log directory. The Builder will create
# sub-directories for each Service program logging type requested.
#
# If no Service program or metadata logging is requested via other parameters in this
# configuration file, the Service log directory (if specified below) will be ignored.
##

service_log_dir="/var/log/"

## Maximum log file age [ *** optional *** ]
#
# Maximum age (in days) for program log files to be retained.
# When not specified, they will be retained forever.

log_age_max=15

## Program log reset interval [ *** optional *** ]
#
# Maximum number of hours Service runtime program log will record before closing
# current file and starting a new program log file. This prevents program log file
# sizes from becoming unreasonably large.
#
# Expressed in hours. Defaults to 12 hours (twice per day) when not specified.
#
# There is no maximum limit.

log_hourly_interval=24

## Align log start times to hour [ *** optional *** ]
#
# Force alignment of log file start times to clock multiple?
# When true, always begin start log files from top of the hour.
# Applies to both program and JSON metadata log types.
#
# When not true, log start times will be based on the time stamp when each program
# began operating.
#
# Follows the system (server) local time clock.
#
# Defaults to false.
##

log_hourly_alignment=true

#########################
## JSON LOG FILE SETTINGS
#########################
# 
# Verbose system metadata recorded in JSON format, stored as independent
# log files that are separate from the program logs.
##

## JSON Metadata [ *** optional *** ]
#
# Enable optional JSON formatted metadata logs when = true.
# Impacts Service runtime program behavior only.
#
# These files contain more detailed metrics than the program log, and provide
# a verbose record of system status. The corresponding JSON files are saved
# in sub-directory /json under $log_dir directory.
##

log_json_export=true

## JSON log file age [ *** optional *** ]
#
# Time interval between when JSON log files are created, in seconds.
#
# Default is 600 (10 minutes).
#
# When $log_hourly_alignment = true and this value is either a factor
# or multiple of 36000, then JSON logs will be aligned with the top
# of the hour (time xx:00). Note 36000 = number of seconds in one hour.
##

log_json_interval=600

## Maximum JSON log file age [ *** optional *** ]
#
# Maximum age (number of days) which JSON metadata log files will be retained.
# When not specified, they will be retained forever.

log_json_age_max=31

################
## PID CONSTANTS
################

##
# *** REQUIRED *** when device cooling fans exist
#
# May be integer or floating point (latter must be enclosed in quotes).
# Set any constant to 0 in order to ignore its corresponding PID value.
# See full documentation for details on these settings.
##

pid_Kp="5.3"
pid_Ki=0
pid_Kd=120

###################
## TIMERS AND FLAGS
###################

## FAN SPEED CHANGE DELAY TIMER [ *** REQUIRED *** ]
# Delay in seconds between fan speed adjustments.

fan_speed_delay=10

## FAN VALIDATION TIMER [ *** REQUIRED *** ]
#
# Base delay (in seconds) between fan header operation checks.
#
# This timer controls how frequently fans are evaluated for:
# 1. Normal operation and status
# 2. Are specific duty fans operating normally?
# 3. Re-test fans previously tagged as abnormal
#
# Note: Base delay period sets CPU fan validation frequency. Device
# fan validation checks and all fan validation checks also occur at
# regular intervals, but all fan check intervals are based off of
# this metric (beginning with CPU fan checks first).
#
# time in seconds (3600 = 1 hour; 21600 = 6 hours; 43200 = 12 hours)
##

fan_validation_delay=21600

## CPU temperature polling interval in seconds [ *** REQUIRED *** ]
#
# Number of seconds between polls of CPU temperature.

cpu_temp_polling_interval=10

#################################
## UNIVERSAL FAN CONTROL SETTINGS
#################################

##
# Optional flags and RPM based fan speed limiters
##

## AUTOMATIC FAN HYSTERESIS DETECTION [ *** optional *** ]
#
# Should generally be set = true especially when not providing fan speed thresholds below.
# When true, fan hysteresis and BMC fan speed thresholds will be set automatically. Upper
# limits will be established based on whether the bmc_threshold_buffer_mode is set to loose or
# strict mode.

auto_bmc_fan_thresholds=true

## UPPER BMC FAN SPEED THRESHOLD METHOD [ *** optional *** ]
#
# Specify how wide the safety margin is between the observed upper fan speeds of
# any fan, versus the maximum fan speed the BMC is capable of processing. This
# only applies when automatic BMC fan threshold detection is active (i.e. when
# auto_bmc_fan_threshold=true) and determines whether upper BMC fan speed limits
# are moved as high as possible to avoid false positive triggering of BMC induced
# panic mode, or if a more conservative approach is preferred where the upper
# BMC fan speed thresholds are set close to the known highest fan speed, which
# leaves less room for anomalies and makes it more likely a fan could trigger
# upper BMC fan speed thresholds and potentially trigger BMC fan panic mode, in
# the event something causes any fan to spin at higher RPMs than expected.
#
# There are two (2) possible settings:
# 1. strict
# 2. loose
#
# strict = sets BMC upper fan speed thresholds at a narrow margin above the
# highest speed any existing fan is capable of attaining under normal operating
# conditions
#
# loose = set BMC upper fan speed thresholds are to their absolute maximum,
# which is normally much higher than the fans are capable of ever attaining
#
# If not specified, the default value = loose

bmc_threshold_buffer_mode="loose"

## multiple of BMC fan hysteresis [ *** optional *** ]
#
# auto-detected when not provided or = 0

# bmc_threshold_interval=75

###################################
## DISK DEVICE FAN CONTROL SETTINGS
###################################

##
# All temperatures are measured in Celsius/Centigrade.
#
# Targets = desired or preferred status. The Service program will attempt to keep
# temperatures as close to the target value as possible, by manipulating fan settings
# and monitoring the affect of fan speed changes on target values.
##

## Average disk device temperature target [ *** REQUIRED *** ]
#
# Disk device cooling is goal-seeked; meaning the Service Runtime program will attempt
# to keep disk devices as close to this temperature as possible by regulating the fans
# responsible for disk device cooling.
#
# This value conforms to the average of all disk devices.

device_avg_temp_target=35

## MAX DISK TEMP [ *** REQUIRED *** ]
#
# PID control aborts and fans set to 100% duty cycle when any disk reaches this temp.

device_max_allowed_temp=50

## DISK DEVICE FAN ZONE DUTY LEVELS [ *** REQUIRED *** ]
#
# Disk device fan duty cycle controls

fan_duty_min[default]=0
device_fan_duty_low=20
device_fan_duty_med=30
device_fan_duty_high=50
device_fan_duty_max=100

## STARTING DISK COOLING FAN DUTY (% on server start-up) [ *** REQUIRED *** ]

device_fan_duty_start=10

## MAXIMUM FAN DUTY PERCENTAGE OF ANY FAN [ *** optional *** ]

fan_duty_limit=100

#################################
## DISK DEVICE MONITORING OPTIONS
#################################

## SSD TEMPERATURE MONITORING  [ *** optional *** ]
# Include SSDs as disk devices only when true.
# Otherwise, they will be ignored since their
# temperature profiles differ from hard drives.
#
# Recommended setting is FALSE unless only SSDs
# are utilized as storage devices. Because most
# SSDs have normal operating temperatures in a
# range that would be considered too hot for
# hard drives.
#
# If your server contains both drive type, consider
# that optimizing your temperature settings for
# hard drives, while setting this flag = true will
# tend to result in elevated fan speeds since the
# SSDs will consistently report temperature readings
# that would be high or very high if they were hard
# drives.

include_ssd=false

################################
## DISK DEVICE POLLING INTERVALS
################################

##
# Time delay in seconds between polling of the operating system to inquire how many disk devices exist.
# This allows the program to compensate for removed, failed, and hot-swapped disk devices. If a device is
# suddenly missing or has just been added, the program adjusts. This is important for certain calculations,
# such as temperature averages, which rely on having an accurate picture of the current storage array composition.
#
# Disk device polling interval should be a multiple of $device_temp_polling_interval
#
# Notes:
#	- Device inventory polling only runs during disk temperature check cycle.
#	- Therefore, device polling interval should be a multiple of device temperature check delay.
# 	- Disk devices with invalid temperature readings are excluded from average device temperature calculations.
# 		e.g. temp reading of 0 when a device has been removed, but the list of devices hasn't been polled yet.
#	- When disk device poll cycle is triggered, it runs prior to disk temperature poll cycle.
#	- Ensures changes in disk array are incorporated into overall device cooling management plan as soon as possible.
##

## Disk device temperature polling interval [ *** REQUIRED *** ]
#
# This is the time (in seconds) between disk device temperature checks. The timing
# for disks is normally much less critical than for the CPU(s), and should be set
# to a value greater than cpu_temp_polling_interval.

device_temp_polling_interval=120

## Disk device inventory polling interval [ *** optional *** ]
#
# Expressed as a delay (in seconds), this value determines the frequency of checking
# for when a disk device has been added or removed from the system.
#
# Should be a multiple of 60 (when not null or 0). A minimum value of 300 (5 minutes)
# is recommended. For most use cases, much higher values (i.e. infrequent checks) are
# preferred, or set to 0 or null to skip checks altogether (e.g. for systems that do
# not have hot swappable drives or are not expected to ever need a device list change).
#
# When a change in disk devices present is detected, an email will be sent to the user,
# provided the email alerting options are also configured.
#
# NOTE: Even when deemed unnecessary, this feature can help to identify failed drives.
#
# Ignored (not checked) when = 0 or null.
#
# Minimum value is 300 (5 minutes). If specified value < 300, the program will revert it to 300 seconds.

device_polling_interval=3600

#################################################
## FAN HEADER | FAN GROUP LABEL NAME:TYPE MAPPING
#################################################

## Possible fan duty categories [ *** REQUIRED *** ]
#
# List of valid fan duty categories, stored in an indexed array.
#
# This list comprises the universe of possible fan duty categories, such as "cpu" and
# "device" fan types. The contents of this array limit various functions in UFC. The list
# must align with fan type binaries and similar program variables.

fan_duty_category[1]="cpu"
fan_duty_category[2]="device"
fan_duty_category[3]="exclude"

## Fan group labels [ *** REQUIRED *** ]
#
# Map fan header name prefixes to fan duty category.
#
# Array correlating words that may be found in fan header names and/or
# fan group/fan zone schema labels. The index of the array consists of
# names, words, or partial words which may appear as a whole or part
# fan name or fan group schema label name. The value of each array
# element is the type of cooling duty associated with the fan name or
# fan group label.
#
# There are three (3) possible values: cpu, device, exclude
#
# 'exclude' means fan headers associated with this fan group label
# should be ignored or excluded. While it is possible some of these
# fan headers will report their current statust to the BMC, we do not
# want UFC to attempt to control them manually.
#
# For example, PSU or Power Supply Unit fans may be part of a power
# supply or indicate fans specially designated to cooling a power
# supply device. 'PSU' has a special distinction because an attempt
# should never be made to control these fans. They should always be
# controlled automatically via temperature control circuits embedded
# in the power supply device, and even if it is possible to control
# it manually, doing so should never be attempted in order to avoid
# potentially damaging the power supply unit.
#
# If a fan label has no text matching any of the array index values
# it will be assigned a fan label type of 'unknown', ignored by the
# fan controller and excluded from manual control.

fan_group_category[cpu]="cpu"
fan_group_category[device]="device"
fan_group_category[disc]="device"
fan_group_category[disk]="device"
fan_group_category[drive]="device"
fan_group_category[exhaust]="device"
fan_group_category[fan]="device"
fan_group_category[fr]="device"
fan_group_category[front]="device"
fan_group_category[graphics]="exclude" # graphics card fans
fan_group_category[hdd]="device"
fan_group_category[ignore]="exclude"
fan_group_category[intake]="device"
fan_group_category[psu]="exclude" # power supply unit fans
fan_group_category[rear]="device"
fan_group_category[side]="device"
fan_group_category[ssd]="device"
fan_group_category[sys]="device"
fan_group_category[vent]="device"

###############################################
## SPECIAL FAN HEADER NAMES (GROUP METHOD ONLY)
###############################################

## Special fan name placeholders [ *** REQUIRED for 'group' fan control model *** ]

#
# Note: These are applicable only with the 'group' fan control model.
# Other fan control methods do not use this information.
#
# List of valid speicial fan names. These act as placeholders and indicate
# the purpose of a particular fan header slot in other arrays.
#
# These values map to various subroutines. They inform UFC how to treat
# IPMI payload bytes with special connotations. It is not uncommon to find
# older BMC's that require placeholder or override byte entries in the IPMI
# payload for various reasons. These values address this need.
##

# reserved_fan_name[DUMMY]=0
# reserved_fan_name[CPU_OVERRIDE]=0
